//SPDX-License Identifier: GLP-3.0 
//simple contract demo

pragma solidity >=0.5.0 >0.8.7;

interface ERC20Interface{

    //function name() external view returns (memory string);
    //function symbol() external view returns (memory string);
    //function decimals() external view returns (uint8);

    function totalSupply() external view returns (uint256);
    function balanceOf(address _owner) external view returns (uint256 balance);
    function transfer(address _to, uint256 _value) external returns (bool success);
   
    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);
    function approve(address _spender, uint256 _value) external returns (bool success);
    function allowance(address _owner, address _spender) external view returns (uint256 remaining);

    event Transfer(address indexed _from, address indexed _to, uint256 _value);
    event Approval(address indexed _owner, address indexed _spender, uint256 _value);

}

contract TheToken is ERC20Interface{
    string public name = "Tony Elumelu";
    string public symbol = "TOE";
    uint public decimals = 0;//18
    uint public override totalSupply;

    address public founder;
    mapping(address => uint) public balances;
    mapping (address => mapping(address => uint)) allowed;
    

    constructor(){
        totalSupply = 1000000;
        founder = msg.sender;
        balances[founder] = 1000000;
    }

    function balanceOf(address _owner) public view override returns (uint256 balance){
        return balances[_owner];
    }

    function transfer(address _to, uint256 _value) public override returns (bool success){
        require(balances[msg.sender] >= _value, "Insufficient Balance");

        balances[_to] +=_value;
        balances[msg.sender] -= _value;
        emit Transfer(msg.sender, _to, _value);

        return true;
    }

    function transferFrom(address _from, address _to, uint256 _value) public override returns (bool success){
        require(allowed[_from][msg.sender] >= _value, "Approved amount is less");
        require(balances[_from] >= _value, "Insufficient Balance");

        balances[_from] -= _value;
        allowed[_from][msg.sender] -= _value;
        balances[_to] += _value;
        emit Transfer(_from, _to, _value);

        return true;
    }

    function approve(address _spender, uint256 _value) public override returns (bool success){
        
        require(balances[msg.sender] >= _value, "Insufficient Balance");
        require(_value >0, "Number of tokan cannot be Zero");

        allowed[msg.sender][_spender] = _value;        
        emit Approval(msg.sender, _spender, _value);

        return true;
        
    }

    function allowance(address _owner, address _spender) public view override returns (uint256 remaining){
        return allowed[_owner][_spender];

    }
//0x14723A09ACff6D2A60DcdF7aA4AFf308FDDC160C, 0x1aE0EA34a72D944a8C7603FfB3eC30a6669E454C
//0x03C6FcED478cBbC9a4FAB34eF9f40767739D1Ff7, 0x1aE0EA34a72D944a8C7603FfB3eC30a6669E454C
//0x1aE0EA34a72D944a8C7603FfB3eC30a6669E454C, 100

//0x14723A09ACff6D2A60DcdF7aA4AFf308FDDC160C, 0x1aE0EA34a72D944a8C7603FfB3eC30a6669E454C, 100
//0x14723A09ACff6D2A60DcdF7aA4AFf308FDDC160C, 0xdD870fA1b7C4700F2BD7f44238821C26f7392148, 100


}
